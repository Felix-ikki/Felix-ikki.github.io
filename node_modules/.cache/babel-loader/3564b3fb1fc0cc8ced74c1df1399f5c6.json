{"ast":null,"code":"var _jsxFileName = \"/Users/felixcenteno/Desktop/Programming/reactApp/gymbro/src/pages/Phase2Create.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport { useContext, useState } from 'react';\nimport { UserContext } from '../App';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport '../App.css';\nimport { useNavigate } from 'react-router-dom';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport Collapse from '@mui/material/Collapse';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useLocalStorage } from '../customHooks/useLocalStorage';\nimport MapExercisesPerDay from '../components/MapExercisesPerDay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Phase2Create() {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    list,\n    setList\n  } = useContext(UserContext);\n  const [nextClick, setNextClick] = useState('');\n  const [open, setOpen] = useState(true);\n  const [exercisesLeft, setExercisesLeft] = useLocalStorage('exercisesLeft', true);\n\n  const handleNextClick = () => {\n    setNextClick(true);\n    setOpen(true);\n\n    if (!exercisesLeft) {\n      navigate('/Phase3Create');\n    } else {\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"1600\",\n      sx: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          padding: '1em',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          width: 'auto',\n          marginTop: '5em'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: \"SCHEDULE YOUR TRAINING PLAN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: \"containerMovementButtons\",\n          children: Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: list[movement].map((exercise, index) => exercise.isClicked && !exercise.day && /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"individualExercise\",\n              id: exercise.title,\n              sx: {\n                backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                color: exercise.isClicked ? '#fff' : '#000'\n              },\n              onClick: () => hadleClickGreenButton(movement, index),\n              children: exercise.title\n            }, exercise.title, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 27\n            }, this))\n          }, movement + \"Fragment\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            width: '100%',\n            backgroundColor: '#bdb9b7',\n            borderRadius: '15px',\n            padding: '1.5em 1em 1.5em 1em',\n            marginBottom: '4em'\n          },\n          children: [/*#__PURE__*/_jsxDEV(MapExercisesPerDay, {\n            day: \"monday\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendarColumn\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDay\",\n              children: \"Tuesday\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDayExerciseContainer\",\n              children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'tuesday' && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"individualExercise\",\n                  id: exercise.title,\n                  sx: {\n                    backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                    color: exercise.isClicked ? '#fff' : '#000'\n                  },\n                  onClick: () => hadleClickGreenButton(movement, index),\n                  children: exercise.title\n                }, exercise.title, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 27\n                }, this))\n              }, movement + \"Fragment\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"buttonDayAdd\",\n                id: 'tuesday',\n                onClick: handleClickDayButton,\n                children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                  sx: {\n                    color: 'white'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendarColumn\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDay\",\n              children: \"Wednesday\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDayExerciseContainer\",\n              children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'wednesday' && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"individualExercise\",\n                  id: exercise.title,\n                  sx: {\n                    backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                    color: exercise.isClicked ? '#fff' : '#000'\n                  },\n                  onClick: () => hadleClickGreenButton(movement, index),\n                  children: exercise.title\n                }, exercise.title, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 27\n                }, this))\n              }, movement + \"Fragment\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"buttonDayAdd\",\n                id: 'wednesday',\n                onClick: handleClickDayButton,\n                children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                  sx: {\n                    color: 'white'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendarColumn\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDay\",\n              children: \"Thursday\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDayExerciseContainer\",\n              children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'thursday' && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"individualExercise\",\n                  id: exercise.title,\n                  sx: {\n                    backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                    color: exercise.isClicked ? '#fff' : '#000'\n                  },\n                  onClick: () => hadleClickGreenButton(movement, index),\n                  children: exercise.title\n                }, exercise.title, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 27\n                }, this))\n              }, movement + \"Fragment\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"buttonDayAdd\",\n                id: 'thursday',\n                onClick: handleClickDayButton,\n                children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                  sx: {\n                    color: 'white'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendarColumn\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDay\",\n              children: \"Friday\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDayExerciseContainer\",\n              children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'friday' && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"individualExercise\",\n                  id: exercise.title,\n                  sx: {\n                    backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                    color: exercise.isClicked ? '#fff' : '#000'\n                  },\n                  onClick: () => hadleClickGreenButton(movement, index),\n                  children: exercise.title\n                }, exercise.title, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 27\n                }, this))\n              }, movement + \"Fragment\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"buttonDayAdd\",\n                id: 'friday',\n                onClick: handleClickDayButton,\n                children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                  sx: {\n                    color: 'white'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendarColumn\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDay\",\n              children: \"Saturday\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDayExerciseContainer\",\n              children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'saturday' && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"individualExercise\",\n                  id: exercise.title,\n                  sx: {\n                    backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                    color: exercise.isClicked ? '#fff' : '#000'\n                  },\n                  onClick: () => hadleClickGreenButton(movement, index),\n                  children: exercise.title\n                }, exercise.title, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 27\n                }, this))\n              }, movement + \"Fragment\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"buttonDayAdd\",\n                id: 'saturday',\n                onClick: handleClickDayButton,\n                children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                  sx: {\n                    color: 'white'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendarColumn\",\n            style: {\n              borderRight: 'none'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDay\",\n              children: \"Sunday\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendarDayExerciseContainer\",\n              children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'sunday' && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"individualExercise\",\n                  id: exercise.title,\n                  sx: {\n                    backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                    color: exercise.isClicked ? '#fff' : '#000'\n                  },\n                  onClick: () => hadleClickGreenButton(movement, index),\n                  children: exercise.title\n                }, exercise.title, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 27\n                }, this))\n              }, movement + \"Fragment\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"buttonDayAdd\",\n                id: 'sunday',\n                onClick: handleClickDayButton,\n                children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                  sx: {\n                    color: 'white'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), day && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: '30%',\n            backgroundColor: '#bdb9b7',\n            position: 'fixed',\n            top: '70px',\n            padding: '0em 1em 0em 1em',\n            right: '30px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            marginBottom: '0.3em',\n            borderRadius: '15px',\n            fontFamily: 'Lato, sans-serif',\n            fontSize: '1.3em'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              display: 'inline-block'\n            },\n            children: [\"Select the exercises you want to add to \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 57\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            padding: '1em',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: 'auto'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            variant1: \"normalButton\",\n            onClick: () => navigate(-1),\n            children: \"Go Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            variant1: \"normalButton\",\n            onClick: handleNextClick,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }, this), nextClick && exercisesLeft && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: '95%',\n            position: 'fixed',\n            top: '70px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Collapse, {\n            in: open,\n            children: /*#__PURE__*/_jsxDEV(Alert, {\n              variant: \"filled\",\n              severity: \"error\",\n              action: /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"close\",\n                color: \"inherit\",\n                size: \"small\",\n                onClick: () => {\n                  setOpen(false);\n                },\n                children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                  fontSize: \"inherit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 21\n              }, this),\n              sx: {\n                marginBottom: 2\n              },\n              children: \"You must select at least one exercise to continue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Phase2Create, \"STckfZj9TPRAQ7ie5+oZNNdfO28=\", false, function () {\n  return [useNavigate, useLocalStorage];\n});\n\n_c = Phase2Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Phase2Create\");","map":{"version":3,"names":["React","Navbar","Footer","Box","Container","Typography","useContext","useState","UserContext","Button","AddIcon","useNavigate","Alert","IconButton","Collapse","CloseIcon","useLocalStorage","MapExercisesPerDay","Phase2Create","navigate","list","setList","nextClick","setNextClick","open","setOpen","exercisesLeft","setExercisesLeft","handleNextClick","display","flexDirection","height","padding","alignItems","width","marginTop","Object","keys","map","movement","exercise","index","isClicked","day","title","backgroundColor","color","hadleClickGreenButton","justifyContent","borderRadius","marginBottom","handleClickDayButton","borderRight","position","top","right","marginLeft","marginRight","fontFamily","fontSize"],"sources":["/Users/felixcenteno/Desktop/Programming/reactApp/gymbro/src/pages/Phase2Create.js"],"sourcesContent":["import React from 'react'\nimport Navbar from '../components/Navbar'\nimport Footer from '../components/Footer'\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport { useContext, useState } from 'react'\nimport { UserContext } from '../App';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport '../App.css'\nimport { useNavigate }  from 'react-router-dom';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport Collapse from '@mui/material/Collapse';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useLocalStorage } from '../customHooks/useLocalStorage';\nimport MapExercisesPerDay from '../components/MapExercisesPerDay'\n\nexport default function Phase2Create() {\n\n  const navigate = useNavigate();\n\n  const {list, setList} = useContext(UserContext);\n  const [nextClick, setNextClick] = useState('');\n  const [open, setOpen] = useState(true);\n  const [exercisesLeft, setExercisesLeft] =  useLocalStorage('exercisesLeft', true)\n\n\n\n  const handleNextClick = () => {\n    setNextClick(true);\n    setOpen(true);\n\n    if (!exercisesLeft){\n      navigate('/Phase3Create');\n    }\n    else {\n      return\n    }\n  }\n\n  return (\n    <>\n    <Navbar/>\n    <Container maxWidth=\"1600\" \n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      height: 'auto',\n    }}>\n      <Box sx={{ \n        padding: '1em',\n        display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      width: 'auto',\n      marginTop: '5em'\n        }}>\n          <Typography variant='h2'>\n               SCHEDULE YOUR TRAINING PLAN</Typography>\n\n                  <Box className='containerMovementButtons'>\n                      {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          !exercise.day &&\n                          <Button variant='individualExercise'\n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                    </Box>\n\n\n                    <Box sx={{ display: 'flex', flexDirection: 'row',\n                   justifyContent: 'space-around', width: '100%',\n                   backgroundColor: '#bdb9b7', borderRadius: '15px',\n                   padding: '1.5em 1em 1.5em 1em', marginBottom: '4em'}}>\n\n                      <MapExercisesPerDay day='monday'/>\n\n\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Tuesday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'tuesday' &&\n                          <Button variant='individualExercise'\n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button variant='buttonDayAdd' id={'tuesday'} onClick={handleClickDayButton}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>\n                      </div>\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Wednesday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'wednesday' &&\n                          <Button variant='individualExercise'\n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button variant='buttonDayAdd' id={'wednesday'} onClick={handleClickDayButton}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>\n                      </div>\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Thursday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'thursday' &&\n                          <Button variant='individualExercise'\n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button variant='buttonDayAdd' id={'thursday'} onClick={handleClickDayButton}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>\n                      </div>\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Friday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'friday' &&\n                          <Button variant='individualExercise'\n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button variant='buttonDayAdd' id={'friday'} onClick={handleClickDayButton}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>                      \n                        </div>\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Saturday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'saturday' &&\n                          <Button variant='individualExercise'\n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button variant='buttonDayAdd'id={'saturday'} onClick={handleClickDayButton}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>                      \n                        </div>\n                      <div className='calendarColumn' style={{borderRight: 'none'}}>\n                      <div className='calendarDay'>\n                        Sunday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'sunday' &&\n                          <Button variant='individualExercise'\n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button variant='buttonDayAdd' id={'sunday'} onClick={handleClickDayButton}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>                     \n                         </div>\n              </Box>\n\n              {day && \n              <Box \n              sx={{width: '30%', backgroundColor: '#bdb9b7', position: 'fixed', \n              top: '70px', padding: '0em 1em 0em 1em',\n              right: '30px',\n              marginLeft: 'auto',\n              marginRight: 'auto', \n              marginBottom: '0.3em', borderRadius: '15px',\n              fontFamily: 'Lato, sans-serif',\n              fontSize: '1.3em'}}> \n              <p style={{ display: 'inline-block'}}>\n                Select the exercises you want to add to <strong>{day}</strong>\n              </p>\n              </Box>}\n\n              <Box sx={{ padding: '1em',display: 'flex', flexDirection: 'row',\n              justifyContent: 'center', alignItems: 'center', width: 'auto'\n              }}>\n                <Button variant= 'contained' variant1='normalButton' onClick={ () => navigate(-1)}>Go Back</Button>\n                \n                <Button variant= 'contained' variant1='normalButton' onClick={handleNextClick}>\n                Next</Button>\n              </Box>\n\n            {nextClick  && exercisesLeft &&  \n            <Box sx={{ width: '95%',\n                        position: 'fixed',\n                        top: '70px'}}>\n              <Collapse in={open}>\n                <Alert variant=\"filled\" severity=\"error\"\n                  action={\n                    <IconButton\n                      aria-label=\"close\"\n                      color=\"inherit\"\n                      size=\"small\"\n                      onClick={() => {\n                        setOpen(false)}}\n                    >\n                      <CloseIcon fontSize=\"inherit\" />\n                    </IconButton>}\n                  sx={{ marginBottom: 2 }}\n                >\n                  You must select at least one exercise to continue\n                </Alert>\n                </Collapse>\n              </Box>}\n\n            </Box>\n        </Container>\n    <Footer/>\n    </>\n  )}"],"mappings":"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"},"metadata":{},"sourceType":"module"}