{"ast":null,"code":"var _jsxFileName = \"/Users/felixcenteno/Desktop/Programming/reactApp/gymbro/src/pages/DragExercises.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Navbar from '../components/Navbar';\nimport Footer from '../components/Footer';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport { useContext } from 'react';\nimport { UserContext } from '../App';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport '../App.css';\nimport { useNavigate } from 'react-router-dom';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport Collapse from '@mui/material/Collapse';\nimport CloseIcon from '@mui/icons-material/Close'; //ver que pija pasa con la fuente que no anda si la pongo en App.css\n//ver display alert y next button\n//tengo que hacer display del error si clikceo next y me queda algun ejercicio con la prop day === '' otherwise /navigate(a next page)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function DragExercises() {\n  _s();\n\n  const navigate = useNavigate();\n  const [day, setDay] = useState('');\n  const {\n    list,\n    setList\n  } = useContext(UserContext);\n  const [nextClick, setNextClick] = useState('');\n  const [open, setOpen] = useState(true);\n  const [greenExercises, setGreenExercises] = useState('');\n\n  const handleClickDayButton = id => {\n    setDay(id);\n    console.log(day);\n  };\n\n  const hadleClickGreenButton = (movement, index) => {\n    if (day) {\n      const newList = { ...list\n      };\n      newList[movement][index].day = day;\n      setList(newList);\n      console.log(newList[movement][index].day);\n    } else {\n      return;\n    }\n  };\n\n  const getCLickedItemsFromList = () => {\n    const newList = [];\n\n    for (let movement in list) {\n      for (let i = 0; i < list[movement].length; i++) {\n        if (list[movement][i].day === true) {\n          newList.push(list[movement][i]);\n        }\n      }\n\n      setGreenExercises(newList);\n    }\n\n    const handleNextClick = () => {\n      setNextClick(true);\n\n      for (let movement in list) {\n        for (let i = 0; i < list[movement].length; i++) {\n          if (list[movement][i].day === '') {\n            setOpen(true);\n          } else {\n            navigate('/SetReps');\n          }\n        }\n      }\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          maxWidth: \"1600\",\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            height: 'auto'\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              padding: '1em',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              width: 'auto'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontFamily: 'Shadows Into Light, cursive',\n                fontSize: '3em',\n                fontWeight: '400',\n                marginTop: '1.5em',\n                color: 'primary.dark',\n                marginBottom: '0.5em'\n              },\n              children: \"Select exercises\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              className: \"containerMovementButtons\",\n              children: Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: list[movement].map((exercise, index) => exercise.isClicked && !exercise.day && /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"buttonIndividualExercise\",\n                  id: exercise.title,\n                  sx: {\n                    fontFamily: 'Lato, sans-serif',\n                    fontSize: '0.8em',\n                    backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                    color: exercise.isClicked ? '#fff' : '#000',\n                    borderRadius: '15px',\n                    padding: '1em',\n                    width: '10em',\n                    boxShadow: '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                    marginTop: '1em',\n                    marginRight: '1em',\n                    transition: '0.3s',\n                    cursor: 'pointer',\n                    '&:hover': {\n                      backgroundColor: '#bdb9b7'\n                    }\n                  },\n                  onClick: () => hadleClickGreenButton(movement, index),\n                  children: exercise.title\n                }, exercise.title, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 27\n                }, this))\n              }, movement + \"Fragment\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-around',\n                width: '100%',\n                backgroundColor: '#bdb9b7',\n                borderRadius: '15px',\n                padding: '1.5em 1em 1.5em 1em',\n                marginBottom: '4em'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"calendarColumn\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDay\",\n                  children: \"Monday\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDayExerciseContainer\",\n                  children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'monday' && /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"buttonIndividualExercise\",\n                      id: exercise.title,\n                      sx: {\n                        fontFamily: 'Lato, sans-serif',\n                        fontSize: '0.8em',\n                        backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                        color: exercise.isClicked ? '#fff' : '#000',\n                        borderRadius: '15px',\n                        padding: '1em',\n                        width: '10em',\n                        boxShadow: '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                        marginTop: '1em',\n                        marginRight: 'auto',\n                        marginLeft: 'auto',\n                        transition: '0.3s',\n                        cursor: 'pointer',\n                        '&:hover': {\n                          backgroundColor: '#bdb9b7'\n                        }\n                      },\n                      onClick: () => hadleClickGreenButton(movement, index),\n                      children: exercise.title\n                    }, exercise.title, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 150,\n                      columnNumber: 27\n                    }, this))\n                  }, movement + \"Fragment\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 21\n                  }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                    sx: {\n                      marginTop: '1em',\n                      width: '3px',\n                      borderRadius: '10px',\n                      marginRight: 'auto',\n                      marginLeft: 'auto',\n                      backgroundColor: '#4f5b62',\n                      '&:hover': {\n                        backgroundColor: 'rgb(15, 175, 15)'\n                      }\n                    },\n                    id: 'monday',\n                    onClick: e => handleClickDayButton(e.target.id),\n                    children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                      sx: {\n                        color: 'white'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 183,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"calendarColumn\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDay\",\n                  children: \"Tuesday\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDayExerciseContainer\",\n                  children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'tuesday' && /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"buttonIndividualExercise\",\n                      id: exercise.title,\n                      sx: {\n                        fontFamily: 'Lato, sans-serif',\n                        fontSize: '0.8em',\n                        backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                        color: exercise.isClicked ? '#fff' : '#000',\n                        borderRadius: '15px',\n                        padding: '1em',\n                        width: '10em',\n                        boxShadow: '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                        marginTop: '1em',\n                        marginRight: 'auto',\n                        marginLeft: 'auto',\n                        transition: '0.3s',\n                        cursor: 'pointer',\n                        '&:hover': {\n                          backgroundColor: '#bdb9b7'\n                        }\n                      },\n                      onClick: () => hadleClickGreenButton(movement, index),\n                      children: exercise.title\n                    }, exercise.title, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 194,\n                      columnNumber: 27\n                    }, this))\n                  }, movement + \"Fragment\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 21\n                  }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                    sx: {\n                      marginTop: '1em',\n                      width: '3px',\n                      borderRadius: '10px',\n                      marginRight: 'auto',\n                      marginLeft: 'auto',\n                      backgroundColor: '#4f5b62',\n                      '&:hover': {\n                        backgroundColor: 'rgb(15, 175, 15)'\n                      }\n                    },\n                    id: 'tuesday',\n                    onClick: e => handleClickDayButton(e.target.id),\n                    children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                      sx: {\n                        color: 'white'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 227,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"calendarColumn\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDay\",\n                  children: \"Wednesday\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDayExerciseContainer\",\n                  children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'wednesday' && /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"buttonIndividualExercise\",\n                      id: exercise.title,\n                      sx: {\n                        fontFamily: 'Lato, sans-serif',\n                        fontSize: '0.8em',\n                        backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                        color: exercise.isClicked ? '#fff' : '#000',\n                        borderRadius: '15px',\n                        padding: '1em',\n                        width: '10em',\n                        boxShadow: '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                        marginTop: '1em',\n                        marginRight: 'auto',\n                        marginLeft: 'auto',\n                        transition: '0.3s',\n                        cursor: 'pointer',\n                        '&:hover': {\n                          backgroundColor: '#bdb9b7'\n                        }\n                      },\n                      onClick: () => hadleClickGreenButton(movement, index),\n                      children: exercise.title\n                    }, exercise.title, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 238,\n                      columnNumber: 27\n                    }, this))\n                  }, movement + \"Fragment\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 21\n                  }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                    sx: {\n                      marginTop: '1em',\n                      width: '3px',\n                      borderRadius: '10px',\n                      marginRight: 'auto',\n                      marginLeft: 'auto',\n                      backgroundColor: '#4f5b62',\n                      '&:hover': {\n                        backgroundColor: 'rgb(15, 175, 15)'\n                      }\n                    },\n                    id: 'wednesday',\n                    onClick: e => handleClickDayButton(e.target.id),\n                    children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                      sx: {\n                        color: 'white'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 271,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"calendarColumn\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDay\",\n                  children: \"Thursday\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDayExerciseContainer\",\n                  children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'thursday' && /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"buttonIndividualExercise\",\n                      id: exercise.title,\n                      sx: {\n                        fontFamily: 'Lato, sans-serif',\n                        fontSize: '0.8em',\n                        backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                        color: exercise.isClicked ? '#fff' : '#000',\n                        borderRadius: '15px',\n                        padding: '1em',\n                        width: '10em',\n                        boxShadow: '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                        marginTop: '1em',\n                        marginRight: 'auto',\n                        marginLeft: 'auto',\n                        transition: '0.3s',\n                        cursor: 'pointer',\n                        '&:hover': {\n                          backgroundColor: '#bdb9b7'\n                        }\n                      },\n                      onClick: () => hadleClickGreenButton(movement, index),\n                      children: exercise.title\n                    }, exercise.title, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 282,\n                      columnNumber: 27\n                    }, this))\n                  }, movement + \"Fragment\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 21\n                  }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                    sx: {\n                      marginTop: '1em',\n                      width: '3px',\n                      borderRadius: '10px',\n                      marginRight: 'auto',\n                      marginLeft: 'auto',\n                      backgroundColor: '#4f5b62',\n                      '&:hover': {\n                        backgroundColor: 'rgb(15, 175, 15)'\n                      }\n                    },\n                    id: 'thursday',\n                    onClick: e => handleClickDayButton(e.target.id),\n                    children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                      sx: {\n                        color: 'white'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 315,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 309,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"calendarColumn\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDay\",\n                  children: \"Friday\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDayExerciseContainer\",\n                  children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'friday' && /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"buttonIndividualExercise\",\n                      id: exercise.title,\n                      sx: {\n                        fontFamily: 'Lato, sans-serif',\n                        fontSize: '0.8em',\n                        backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                        color: exercise.isClicked ? '#fff' : '#000',\n                        borderRadius: '15px',\n                        padding: '1em',\n                        width: '10em',\n                        boxShadow: '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                        marginTop: '1em',\n                        marginRight: 'auto',\n                        marginLeft: 'auto',\n                        transition: '0.3s',\n                        cursor: 'pointer',\n                        '&:hover': {\n                          backgroundColor: '#bdb9b7'\n                        }\n                      },\n                      onClick: () => hadleClickGreenButton(movement, index),\n                      children: exercise.title\n                    }, exercise.title, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 326,\n                      columnNumber: 27\n                    }, this))\n                  }, movement + \"Fragment\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 21\n                  }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                    sx: {\n                      marginTop: '1em',\n                      width: '3px',\n                      borderRadius: '10px',\n                      marginRight: 'auto',\n                      marginLeft: 'auto',\n                      backgroundColor: '#4f5b62',\n                      '&:hover': {\n                        backgroundColor: 'rgb(15, 175, 15)'\n                      }\n                    },\n                    id: 'friday',\n                    onClick: e => handleClickDayButton(e.target.id),\n                    children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                      sx: {\n                        color: 'white'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 359,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 353,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"calendarColumn\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDay\",\n                  children: \"Saturday\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDayExerciseContainer\",\n                  children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'saturday' && /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"buttonIndividualExercise\",\n                      id: exercise.title,\n                      sx: {\n                        fontFamily: 'Lato, sans-serif',\n                        fontSize: '0.8em',\n                        backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                        color: exercise.isClicked ? '#fff' : '#000',\n                        borderRadius: '15px',\n                        padding: '1em',\n                        width: '10em',\n                        boxShadow: '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                        marginTop: '1em',\n                        marginRight: 'auto',\n                        marginLeft: 'auto',\n                        transition: '0.3s',\n                        cursor: 'pointer',\n                        '&:hover': {\n                          backgroundColor: '#bdb9b7'\n                        }\n                      },\n                      onClick: () => hadleClickGreenButton(movement, index),\n                      children: exercise.title\n                    }, exercise.title, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 370,\n                      columnNumber: 27\n                    }, this))\n                  }, movement + \"Fragment\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 21\n                  }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                    sx: {\n                      marginTop: '1em',\n                      width: '3px',\n                      borderRadius: '10px',\n                      marginRight: 'auto',\n                      marginLeft: 'auto',\n                      backgroundColor: '#4f5b62',\n                      '&:hover': {\n                        backgroundColor: 'rgb(15, 175, 15)'\n                      }\n                    },\n                    id: 'saturday',\n                    onClick: e => handleClickDayButton(e.target.id),\n                    children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                      sx: {\n                        color: 'white'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 403,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 397,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"calendarColumn\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDay\",\n                  children: \"Sunday\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"calendarDayExerciseContainer\",\n                  style: {\n                    borderRight: 'none'\n                  },\n                  children: [Object.keys(list).map(movement => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: list[movement].map((exercise, index) => exercise.isClicked && exercise.day === 'sunday' && /*#__PURE__*/_jsxDEV(Button, {\n                      className: \"buttonIndividualExercise\",\n                      id: exercise.title,\n                      sx: {\n                        fontFamily: 'Lato, sans-serif',\n                        fontSize: '0.8em',\n                        backgroundColor: exercise.isClicked ? 'rgb(15, 175, 15)' : '#90caf9',\n                        color: exercise.isClicked ? '#fff' : '#000',\n                        borderRadius: '15px',\n                        padding: '1em',\n                        width: '10em',\n                        boxShadow: '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                        marginTop: '1em',\n                        marginRight: 'auto',\n                        marginLeft: 'auto',\n                        transition: '0.3s',\n                        cursor: 'pointer',\n                        '&:hover': {\n                          backgroundColor: '#bdb9b7'\n                        }\n                      },\n                      onClick: () => hadleClickGreenButton(movement, index),\n                      children: exercise.title\n                    }, exercise.title, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 414,\n                      columnNumber: 27\n                    }, this))\n                  }, movement + \"Fragment\", false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 410,\n                    columnNumber: 21\n                  }, this)), /*#__PURE__*/_jsxDEV(Button, {\n                    sx: {\n                      marginTop: '1em',\n                      width: '3px',\n                      borderRadius: '10px',\n                      marginRight: 'auto',\n                      marginLeft: 'auto',\n                      backgroundColor: '#4f5b62',\n                      '&:hover': {\n                        backgroundColor: 'rgb(15, 175, 15)'\n                      }\n                    },\n                    id: 'sunday',\n                    onClick: e => handleClickDayButton(e.target.id),\n                    children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                      sx: {\n                        color: 'white'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 447,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 441,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 21\n            }, this), day && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '30%',\n                backgroundColor: '#bdb9b7',\n                position: 'fixed',\n                top: '70px',\n                padding: '0em 1em 0em 1em',\n                right: '30px',\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                marginBottom: '0.3em',\n                borderRadius: '15px',\n                fontFamily: 'Lato, sans-serif',\n                fontSize: '1.3em'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  display: 'inline-block'\n                },\n                children: [\"Select the exercises you want to add to \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 462,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                padding: '1em',\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: 'auto'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                className: \"buttonBig\",\n                sx: {\n                  backgroundColor: 'primary.main',\n                  fontFamily: 'Shadows Into Light, cursive',\n                  fontSize: '3em',\n                  fontWeight: '500',\n                  width: '7em',\n                  borderRadius: '20px',\n                  marginRight: '1em'\n                },\n                onClick: () => navigate(-1),\n                children: \"Go Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                className: \"buttonBig\",\n                sx: {\n                  backgroundColor: 'primary.main',\n                  fontFamily: 'Shadows Into Light, cursive',\n                  fontSize: '3em',\n                  fontWeight: '500',\n                  width: '7em',\n                  borderRadius: '20px',\n                  marginRight: '1em'\n                },\n                onClick: () => handleNextClick(),\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 15\n            }, this), selectedExercises < 1 && nextClick && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '95%',\n                position: 'fixed',\n                top: '70px'\n              },\n              children: /*#__PURE__*/_jsxDEV(Collapse, {\n                in: open,\n                children: /*#__PURE__*/_jsxDEV(Alert, {\n                  variant: \"filled\",\n                  severity: \"error\",\n                  action: /*#__PURE__*/_jsxDEV(IconButton, {\n                    \"aria-label\": \"close\",\n                    color: \"inherit\",\n                    size: \"small\",\n                    onClick: () => {\n                      setOpen(false);\n                    },\n                    children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                      fontSize: \"inherit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 505,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 498,\n                    columnNumber: 21\n                  }, this),\n                  sx: {\n                    marginBottom: 2\n                  },\n                  children: \"You must select at least one exercise to continue\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 496,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true);\n    };\n  };\n}\n\n_s(DragExercises, \"2cD0RGVXlwv5xfUpXx7SwPIULK4=\", false, function () {\n  return [useNavigate];\n});\n\n_c = DragExercises;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragExercises\");","map":{"version":3,"names":["React","useState","Navbar","Footer","Box","Container","Typography","useContext","UserContext","Button","AddIcon","useNavigate","Alert","IconButton","Collapse","CloseIcon","DragExercises","navigate","day","setDay","list","setList","nextClick","setNextClick","open","setOpen","greenExercises","setGreenExercises","handleClickDayButton","id","console","log","hadleClickGreenButton","movement","index","newList","getCLickedItemsFromList","i","length","push","handleNextClick","display","flexDirection","height","padding","alignItems","width","fontFamily","fontSize","fontWeight","marginTop","color","marginBottom","Object","keys","map","exercise","isClicked","title","backgroundColor","borderRadius","boxShadow","marginRight","transition","cursor","justifyContent","marginLeft","e","target","borderRight","position","top","right","selectedExercises"],"sources":["/Users/felixcenteno/Desktop/Programming/reactApp/gymbro/src/pages/DragExercises.js"],"sourcesContent":["import React, { useState } from 'react'\nimport Navbar from '../components/Navbar'\nimport Footer from '../components/Footer'\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport { useContext } from 'react'\nimport { UserContext } from '../App';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport '../App.css'\nimport { useNavigate }  from 'react-router-dom';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport Collapse from '@mui/material/Collapse';\nimport CloseIcon from '@mui/icons-material/Close';\n\n\n//ver que pija pasa con la fuente que no anda si la pongo en App.css\n\n//ver display alert y next button\n\n//tengo que hacer display del error si clikceo next y me queda algun ejercicio con la prop day === '' otherwise /navigate(a next page)\n\n\nexport default function DragExercises() {\n\n  const navigate = useNavigate();\n\n  const [day, setDay] = useState('')\n  const {list, setList} = useContext(UserContext);\n  const [nextClick, setNextClick] = useState('')\n  const [open, setOpen] = useState(true);\n  const [greenExercises, setGreenExercises] = useState('')\n\n\n  const handleClickDayButton = (id) => {\n    setDay(id)\n    console.log(day)\n    }\n\n  const hadleClickGreenButton = (movement, index) => {\n    if (day) {\n      const newList = {...list};\n    newList[movement][index].day = day\n    setList(newList)\n    console.log( newList[movement][index].day)\n    }\n    else {\n      return\n    }\n  }\n\n\n const getCLickedItemsFromList = () => {\n  const newList = []\n  for (let movement in list) {\n    for (let i = 0; i < list[movement].length; i++) {\n      if (list[movement][i].day === true) {\n        newList.push(list[movement][i])\n      }\n    }\n  setGreenExercises(newList)\n }\n\n  const handleNextClick = () => {\n    setNextClick(true)\n    for (let movement in list) {\n      for (let i = 0; i < list[movement].length; i++) {\n        if (list[movement][i].day === '') {\n          setOpen(true)\n        }\n        else {\n          navigate('/SetReps')\n        }\n      }\n    }\n  return (\n    <>\n    <Navbar/>\n    <Container maxWidth=\"1600\" \n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      height: 'auto',\n    }}>\n      <Box sx={{ \n        padding: '1em',\n        display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      width: 'auto'\n        }}>\n          <Typography sx={{ \n            fontFamily: 'Shadows Into Light, cursive', \n            fontSize: '3em', \n            fontWeight: '400',\n            marginTop: '1.5em',\n            color: 'primary.dark',\n            marginBottom: '0.5em',\n            }}>\n               Select exercises</Typography>\n\n                  <Box className='containerMovementButtons'>\n                      {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          !exercise.day &&\n                          <Button className='buttonIndividualExercise' \n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            fontFamily: 'Lato, sans-serif',\n                            fontSize: '0.8em',\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                            borderRadius: '15px',\n                            padding: '1em',\n                            width: '10em',\n                            boxShadow:  '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                            marginTop: '1em',\n                            marginRight: '1em',\n                            transition: '0.3s',\n                            cursor: 'pointer',\n                            '&:hover': { \n                              backgroundColor: '#bdb9b7',\n                          },\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                    </Box>\n                    <Box sx={{ display: 'flex', flexDirection: 'row',\n                   justifyContent: 'space-around', width: '100%',\n                   backgroundColor: '#bdb9b7', borderRadius: '15px',\n                   padding: '1.5em 1em 1.5em 1em', marginBottom: '4em'}}>\n                    <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Monday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'monday' &&\n                          <Button className='buttonIndividualExercise' \n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            fontFamily: 'Lato, sans-serif',\n                            fontSize: '0.8em',\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                            borderRadius: '15px',\n                            padding: '1em',\n                            width: '10em',\n                            boxShadow:  '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                            marginTop: '1em',\n                            marginRight: 'auto',\n                            marginLeft: 'auto',\n                            transition: '0.3s',\n                            cursor: 'pointer',\n                            '&:hover': { \n                              backgroundColor: '#bdb9b7',\n                          },\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button \n                          sx={{marginTop: '1em', width: '3px', borderRadius: '10px', marginRight: 'auto',\n                              marginLeft: 'auto', backgroundColor: '#4f5b62', \n                              '&:hover': { \n                                backgroundColor: 'rgb(15, 175, 15)',\n                      }}} id={'monday'} onClick={(e) => handleClickDayButton(e.target.id)}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>\n                      </div>\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Tuesday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'tuesday' &&\n                          <Button className='buttonIndividualExercise' \n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            fontFamily: 'Lato, sans-serif',\n                            fontSize: '0.8em',\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                            borderRadius: '15px',\n                            padding: '1em',\n                            width: '10em',\n                            boxShadow:  '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                            marginTop: '1em',\n                            marginRight: 'auto',\n                            marginLeft: 'auto',\n                            transition: '0.3s',\n                            cursor: 'pointer',\n                            '&:hover': { \n                              backgroundColor: '#bdb9b7',\n                          },\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button \n                          sx={{marginTop: '1em', width: '3px', borderRadius: '10px', marginRight: 'auto',\n                              marginLeft: 'auto', backgroundColor: '#4f5b62', \n                              '&:hover': { \n                                backgroundColor: 'rgb(15, 175, 15)',\n                      }}} id={'tuesday'} onClick={(e) => handleClickDayButton(e.target.id)}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>\n                      </div>\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Wednesday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'wednesday' &&\n                          <Button className='buttonIndividualExercise' \n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            fontFamily: 'Lato, sans-serif',\n                            fontSize: '0.8em',\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                            borderRadius: '15px',\n                            padding: '1em',\n                            width: '10em',\n                            boxShadow:  '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                            marginTop: '1em',\n                            marginRight: 'auto',\n                            marginLeft: 'auto',\n                            transition: '0.3s',\n                            cursor: 'pointer',\n                            '&:hover': { \n                              backgroundColor: '#bdb9b7',\n                          },\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button \n                          sx={{marginTop: '1em', width: '3px', borderRadius: '10px', marginRight: 'auto',\n                              marginLeft: 'auto', backgroundColor: '#4f5b62', \n                              '&:hover': { \n                                backgroundColor: 'rgb(15, 175, 15)',\n                      }}} id={'wednesday'} onClick={(e) => handleClickDayButton(e.target.id)}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>\n                      </div>\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Thursday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'thursday' &&\n                          <Button className='buttonIndividualExercise' \n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            fontFamily: 'Lato, sans-serif',\n                            fontSize: '0.8em',\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                            borderRadius: '15px',\n                            padding: '1em',\n                            width: '10em',\n                            boxShadow:  '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                            marginTop: '1em',\n                            marginRight: 'auto',\n                            marginLeft: 'auto',\n                            transition: '0.3s',\n                            cursor: 'pointer',\n                            '&:hover': { \n                              backgroundColor: '#bdb9b7',\n                          },\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button \n                          sx={{marginTop: '1em', width: '3px', borderRadius: '10px', marginRight: 'auto',\n                              marginLeft: 'auto', backgroundColor: '#4f5b62', \n                              '&:hover': { \n                                backgroundColor: 'rgb(15, 175, 15)',\n                      }}} id={'thursday'} onClick={(e) => handleClickDayButton(e.target.id)}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>\n                      </div>\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Friday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'friday' &&\n                          <Button className='buttonIndividualExercise' \n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            fontFamily: 'Lato, sans-serif',\n                            fontSize: '0.8em',\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                            borderRadius: '15px',\n                            padding: '1em',\n                            width: '10em',\n                            boxShadow:  '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                            marginTop: '1em',\n                            marginRight: 'auto',\n                            marginLeft: 'auto',\n                            transition: '0.3s',\n                            cursor: 'pointer',\n                            '&:hover': { \n                              backgroundColor: '#bdb9b7',\n                          },\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button \n                          sx={{marginTop: '1em', width: '3px', borderRadius: '10px', marginRight: 'auto',\n                              marginLeft: 'auto', backgroundColor: '#4f5b62', \n                              '&:hover': { \n                                backgroundColor: 'rgb(15, 175, 15)',\n                      }}} id={'friday'} onClick={(e) => handleClickDayButton(e.target.id)}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>                      \n                        </div>\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Saturday</div>\n                        <div className='calendarDayExerciseContainer'>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'saturday' &&\n                          <Button className='buttonIndividualExercise' \n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            fontFamily: 'Lato, sans-serif',\n                            fontSize: '0.8em',\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                            borderRadius: '15px',\n                            padding: '1em',\n                            width: '10em',\n                            boxShadow:  '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                            marginTop: '1em',\n                            marginRight: 'auto',\n                            marginLeft: 'auto',\n                            transition: '0.3s',\n                            cursor: 'pointer',\n                            '&:hover': { \n                              backgroundColor: '#bdb9b7',\n                          },\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button \n                          sx={{marginTop: '1em', width: '3px', borderRadius: '10px', marginRight: 'auto',\n                              marginLeft: 'auto', backgroundColor: '#4f5b62', \n                              '&:hover': { \n                                backgroundColor: 'rgb(15, 175, 15)',\n                      }}} id={'saturday'} onClick={(e) => handleClickDayButton(e.target.id)}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>                      \n                        </div>\n                      <div className='calendarColumn'>\n                      <div className='calendarDay'>\n                        Sunday</div>\n                        <div className='calendarDayExerciseContainer' style={{borderRight: 'none'}}>\n                        {Object.keys(list).map(movement => \n                    <React.Fragment key={movement + \"Fragment\"}>\n                      {list[movement]\n                          .map((exercise, index) => exercise.isClicked && \n                          exercise.day === 'sunday' &&\n                          <Button className='buttonIndividualExercise' \n                          key={exercise.title}\n                          id={exercise.title}\n                          sx={{\n                            fontFamily: 'Lato, sans-serif',\n                            fontSize: '0.8em',\n                            backgroundColor: exercise.isClicked\n                            ? 'rgb(15, 175, 15)'\n                            : '#90caf9',\n                            color: exercise.isClicked\n                            ? '#fff'\n                            : '#000',\n                            borderRadius: '15px',\n                            padding: '1em',\n                            width: '10em',\n                            boxShadow:  '10px 5px 10px rgba(0, 0, 0, 0.3)',\n                            marginTop: '1em',\n                            marginRight: 'auto',\n                            marginLeft: 'auto',\n                            transition: '0.3s',\n                            cursor: 'pointer',\n                            '&:hover': { \n                              backgroundColor: '#bdb9b7',\n                          },\n                          }} onClick={() => hadleClickGreenButton(movement, index)}>\n                              {exercise.title}</Button>)}\n                        </React.Fragment>)}\n                          <Button \n                          sx={{marginTop: '1em', width: '3px', borderRadius: '10px', marginRight: 'auto',\n                              marginLeft: 'auto', backgroundColor: '#4f5b62', \n                              '&:hover': { \n                                backgroundColor: 'rgb(15, 175, 15)',\n                      }}} id={'sunday'} onClick={(e) => handleClickDayButton(e.target.id)}>\n                        <AddIcon sx={{ color: 'white' }}/></Button></div>                     \n                         </div>\n              </Box>\n\n              {day && \n              <Box \n              sx={{width: '30%', backgroundColor: '#bdb9b7', position: 'fixed', \n              top: '70px', padding: '0em 1em 0em 1em',\n              right: '30px',\n              marginLeft: 'auto',\n              marginRight: 'auto', \n              marginBottom: '0.3em', borderRadius: '15px',\n              fontFamily: 'Lato, sans-serif',\n              fontSize: '1.3em'}}> \n              <p style={{ display: 'inline-block'}}>\n                Select the exercises you want to add to <strong>{day}</strong>\n              </p>\n              </Box>}\n\n              <Box sx={{ padding: '1em',display: 'flex', flexDirection: 'row',\n              justifyContent: 'center', alignItems: 'center', width: 'auto'\n            }}>\n            <Button variant=\"contained\" className='buttonBig' \n            sx={{backgroundColor: 'primary.main',\n            fontFamily: 'Shadows Into Light, cursive',\n            fontSize: '3em',\n            fontWeight: '500',\n            width: '7em',\n            borderRadius: '20px',\n            marginRight: '1em',\n            }} onClick={ () => navigate(-1)}>Go Back</Button>\n            <Button variant=\"contained\" className='buttonBig' \n            sx={{backgroundColor: 'primary.main',\n            fontFamily: 'Shadows Into Light, cursive',\n            fontSize: '3em',\n            fontWeight: '500',\n            width: '7em',\n            borderRadius: '20px',\n            marginRight: '1em',\n            }} onClick={() => handleNextClick()} \n            >\n            Next</Button>\n            </Box>\n\n            {selectedExercises < 1  && nextClick &&  \n            <Box sx={{ width: '95%',\n                        position: 'fixed',\n                        top: '70px'}}>\n              <Collapse in={open}>\n                <Alert variant=\"filled\" severity=\"error\"\n                  action={\n                    <IconButton\n                      aria-label=\"close\"\n                      color=\"inherit\"\n                      size=\"small\"\n                      onClick={() => {\n                        setOpen(false)}}\n                    >\n                      <CloseIcon fontSize=\"inherit\" />\n                    </IconButton>}\n                  sx={{ marginBottom: 2 }}\n                >\n                  You must select at least one exercise to continue\n                </Alert>\n                </Collapse>\n              </Box>}\n\n            </Box>\n        </Container>\n    <Footer/>\n    </>\n  )}}}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAO,YAAP;AACA,SAASC,WAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,2BAAtB,C,CAGA;AAEA;AAEA;;;;AAGA,eAAe,SAASC,aAAT,GAAyB;EAAA;;EAEtC,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;EAEA,MAAM,CAACO,GAAD,EAAMC,MAAN,IAAgBlB,QAAQ,CAAC,EAAD,CAA9B;EACA,MAAM;IAACmB,IAAD;IAAOC;EAAP,IAAkBd,UAAU,CAACC,WAAD,CAAlC;EACA,MAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAM,CAACuB,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACyB,cAAD,EAAiBC,iBAAjB,IAAsC1B,QAAQ,CAAC,EAAD,CAApD;;EAGA,MAAM2B,oBAAoB,GAAIC,EAAD,IAAQ;IACnCV,MAAM,CAACU,EAAD,CAAN;IACAC,OAAO,CAACC,GAAR,CAAYb,GAAZ;EACC,CAHH;;EAKA,MAAMc,qBAAqB,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;IACjD,IAAIhB,GAAJ,EAAS;MACP,MAAMiB,OAAO,GAAG,EAAC,GAAGf;MAAJ,CAAhB;MACFe,OAAO,CAACF,QAAD,CAAP,CAAkBC,KAAlB,EAAyBhB,GAAzB,GAA+BA,GAA/B;MACAG,OAAO,CAACc,OAAD,CAAP;MACAL,OAAO,CAACC,GAAR,CAAaI,OAAO,CAACF,QAAD,CAAP,CAAkBC,KAAlB,EAAyBhB,GAAtC;IACC,CALD,MAMK;MACH;IACD;EACF,CAVD;;EAaD,MAAMkB,uBAAuB,GAAG,MAAM;IACrC,MAAMD,OAAO,GAAG,EAAhB;;IACA,KAAK,IAAIF,QAAT,IAAqBb,IAArB,EAA2B;MACzB,KAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,IAAI,CAACa,QAAD,CAAJ,CAAeK,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;QAC9C,IAAIjB,IAAI,CAACa,QAAD,CAAJ,CAAeI,CAAf,EAAkBnB,GAAlB,KAA0B,IAA9B,EAAoC;UAClCiB,OAAO,CAACI,IAAR,CAAanB,IAAI,CAACa,QAAD,CAAJ,CAAeI,CAAf,CAAb;QACD;MACF;;MACHV,iBAAiB,CAACQ,OAAD,CAAjB;IACA;;IAEA,MAAMK,eAAe,GAAG,MAAM;MAC5BjB,YAAY,CAAC,IAAD,CAAZ;;MACA,KAAK,IAAIU,QAAT,IAAqBb,IAArB,EAA2B;QACzB,KAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,IAAI,CAACa,QAAD,CAAJ,CAAeK,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;UAC9C,IAAIjB,IAAI,CAACa,QAAD,CAAJ,CAAeI,CAAf,EAAkBnB,GAAlB,KAA0B,EAA9B,EAAkC;YAChCO,OAAO,CAAC,IAAD,CAAP;UACD,CAFD,MAGK;YACHR,QAAQ,CAAC,UAAD,CAAR;UACD;QACF;MACF;;MACH,oBACE;QAAA,wBACA,QAAC,MAAD;UAAA;UAAA;UAAA;QAAA,QADA,eAEA,QAAC,SAAD;UAAW,QAAQ,EAAC,MAApB;UACA,EAAE,EAAE;YACFwB,OAAO,EAAE,MADP;YAEFC,aAAa,EAAE,QAFb;YAGFC,MAAM,EAAE;UAHN,CADJ;UAAA,uBAME,QAAC,GAAD;YAAK,EAAE,EAAE;cACPC,OAAO,EAAE,KADF;cAEPH,OAAO,EAAE,MAFF;cAGTC,aAAa,EAAE,QAHN;cAITG,UAAU,EAAE,QAJH;cAKTC,KAAK,EAAE;YALE,CAAT;YAAA,wBAOI,QAAC,UAAD;cAAY,EAAE,EAAE;gBACdC,UAAU,EAAE,6BADE;gBAEdC,QAAQ,EAAE,KAFI;gBAGdC,UAAU,EAAE,KAHE;gBAIdC,SAAS,EAAE,OAJG;gBAKdC,KAAK,EAAE,cALO;gBAMdC,YAAY,EAAE;cANA,CAAhB;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAPJ,eAiBY,QAAC,GAAD;cAAK,SAAS,EAAC,0BAAf;cAAA,UACKC,MAAM,CAACC,IAAP,CAAYlC,IAAZ,EAAkBmC,GAAlB,CAAsBtB,QAAQ,iBACjC,QAAC,KAAD,CAAO,QAAP;gBAAA,UACGb,IAAI,CAACa,QAAD,CAAJ,CACIsB,GADJ,CACQ,CAACC,QAAD,EAAWtB,KAAX,KAAqBsB,QAAQ,CAACC,SAAT,IAC1B,CAACD,QAAQ,CAACtC,GADgB,iBAE1B,QAAC,MAAD;kBAAQ,SAAS,EAAC,0BAAlB;kBAEA,EAAE,EAAEsC,QAAQ,CAACE,KAFb;kBAGA,EAAE,EAAE;oBACFX,UAAU,EAAE,kBADV;oBAEFC,QAAQ,EAAE,OAFR;oBAGFW,eAAe,EAAEH,QAAQ,CAACC,SAAT,GACf,kBADe,GAEf,SALA;oBAMFN,KAAK,EAAEK,QAAQ,CAACC,SAAT,GACL,MADK,GAEL,MARA;oBASFG,YAAY,EAAE,MATZ;oBAUFhB,OAAO,EAAE,KAVP;oBAWFE,KAAK,EAAE,MAXL;oBAYFe,SAAS,EAAG,kCAZV;oBAaFX,SAAS,EAAE,KAbT;oBAcFY,WAAW,EAAE,KAdX;oBAeFC,UAAU,EAAE,MAfV;oBAgBFC,MAAM,EAAE,SAhBN;oBAiBF,WAAW;sBACTL,eAAe,EAAE;oBADR;kBAjBT,CAHJ;kBAuBG,OAAO,EAAE,MAAM3B,qBAAqB,CAACC,QAAD,EAAWC,KAAX,CAvBvC;kBAAA,UAwBKsB,QAAQ,CAACE;gBAxBd,GACKF,QAAQ,CAACE,KADd;kBAAA;kBAAA;kBAAA;gBAAA,QAHH;cADH,GAAqBzB,QAAQ,GAAG,UAAhC;gBAAA;gBAAA;gBAAA;cAAA,QADG;YADL;cAAA;cAAA;cAAA;YAAA,QAjBZ,eAkDc,QAAC,GAAD;cAAK,EAAE,EAAE;gBAAEQ,OAAO,EAAE,MAAX;gBAAmBC,aAAa,EAAE,KAAlC;gBACVuB,cAAc,EAAE,cADN;gBACsBnB,KAAK,EAAE,MAD7B;gBAEVa,eAAe,EAAE,SAFP;gBAEkBC,YAAY,EAAE,MAFhC;gBAGVhB,OAAO,EAAE,qBAHC;gBAGsBQ,YAAY,EAAE;cAHpC,CAAT;cAAA,wBAIA;gBAAK,SAAS,EAAC,gBAAf;gBAAA,wBACE;kBAAK,SAAS,EAAC,aAAf;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QADF,eAGI;kBAAK,SAAS,EAAC,8BAAf;kBAAA,WACCC,MAAM,CAACC,IAAP,CAAYlC,IAAZ,EAAkBmC,GAAlB,CAAsBtB,QAAQ,iBACnC,QAAC,KAAD,CAAO,QAAP;oBAAA,UACGb,IAAI,CAACa,QAAD,CAAJ,CACIsB,GADJ,CACQ,CAACC,QAAD,EAAWtB,KAAX,KAAqBsB,QAAQ,CAACC,SAAT,IAC1BD,QAAQ,CAACtC,GAAT,KAAiB,QADS,iBAE1B,QAAC,MAAD;sBAAQ,SAAS,EAAC,0BAAlB;sBAEA,EAAE,EAAEsC,QAAQ,CAACE,KAFb;sBAGA,EAAE,EAAE;wBACFX,UAAU,EAAE,kBADV;wBAEFC,QAAQ,EAAE,OAFR;wBAGFW,eAAe,EAAEH,QAAQ,CAACC,SAAT,GACf,kBADe,GAEf,SALA;wBAMFN,KAAK,EAAEK,QAAQ,CAACC,SAAT,GACL,MADK,GAEL,MARA;wBASFG,YAAY,EAAE,MATZ;wBAUFhB,OAAO,EAAE,KAVP;wBAWFE,KAAK,EAAE,MAXL;wBAYFe,SAAS,EAAG,kCAZV;wBAaFX,SAAS,EAAE,KAbT;wBAcFY,WAAW,EAAE,MAdX;wBAeFI,UAAU,EAAE,MAfV;wBAgBFH,UAAU,EAAE,MAhBV;wBAiBFC,MAAM,EAAE,SAjBN;wBAkBF,WAAW;0BACTL,eAAe,EAAE;wBADR;sBAlBT,CAHJ;sBAwBG,OAAO,EAAE,MAAM3B,qBAAqB,CAACC,QAAD,EAAWC,KAAX,CAxBvC;sBAAA,UAyBKsB,QAAQ,CAACE;oBAzBd,GACKF,QAAQ,CAACE,KADd;sBAAA;sBAAA;sBAAA;oBAAA,QAHH;kBADH,GAAqBzB,QAAQ,GAAG,UAAhC;oBAAA;oBAAA;oBAAA;kBAAA,QADK,CADD,eAiCE,QAAC,MAAD;oBACA,EAAE,EAAE;sBAACiB,SAAS,EAAE,KAAZ;sBAAmBJ,KAAK,EAAE,KAA1B;sBAAiCc,YAAY,EAAE,MAA/C;sBAAuDE,WAAW,EAAE,MAApE;sBACAI,UAAU,EAAE,MADZ;sBACoBP,eAAe,EAAE,SADrC;sBAEA,WAAW;wBACTA,eAAe,EAAE;sBADR;oBAFX,CADJ;oBAKA,EAAE,EAAE,QALJ;oBAKc,OAAO,EAAGQ,CAAD,IAAOvC,oBAAoB,CAACuC,CAAC,CAACC,MAAF,CAASvC,EAAV,CALlD;oBAAA,uBAMF,QAAC,OAAD;sBAAS,EAAE,EAAE;wBAAEsB,KAAK,EAAE;sBAAT;oBAAb;sBAAA;sBAAA;sBAAA;oBAAA;kBANE;oBAAA;oBAAA;oBAAA;kBAAA,QAjCF;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAHJ;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAJA,eAgDE;gBAAK,SAAS,EAAC,gBAAf;gBAAA,wBACA;kBAAK,SAAS,EAAC,aAAf;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QADA,eAGE;kBAAK,SAAS,EAAC,8BAAf;kBAAA,WACCE,MAAM,CAACC,IAAP,CAAYlC,IAAZ,EAAkBmC,GAAlB,CAAsBtB,QAAQ,iBACnC,QAAC,KAAD,CAAO,QAAP;oBAAA,UACGb,IAAI,CAACa,QAAD,CAAJ,CACIsB,GADJ,CACQ,CAACC,QAAD,EAAWtB,KAAX,KAAqBsB,QAAQ,CAACC,SAAT,IAC1BD,QAAQ,CAACtC,GAAT,KAAiB,SADS,iBAE1B,QAAC,MAAD;sBAAQ,SAAS,EAAC,0BAAlB;sBAEA,EAAE,EAAEsC,QAAQ,CAACE,KAFb;sBAGA,EAAE,EAAE;wBACFX,UAAU,EAAE,kBADV;wBAEFC,QAAQ,EAAE,OAFR;wBAGFW,eAAe,EAAEH,QAAQ,CAACC,SAAT,GACf,kBADe,GAEf,SALA;wBAMFN,KAAK,EAAEK,QAAQ,CAACC,SAAT,GACL,MADK,GAEL,MARA;wBASFG,YAAY,EAAE,MATZ;wBAUFhB,OAAO,EAAE,KAVP;wBAWFE,KAAK,EAAE,MAXL;wBAYFe,SAAS,EAAG,kCAZV;wBAaFX,SAAS,EAAE,KAbT;wBAcFY,WAAW,EAAE,MAdX;wBAeFI,UAAU,EAAE,MAfV;wBAgBFH,UAAU,EAAE,MAhBV;wBAiBFC,MAAM,EAAE,SAjBN;wBAkBF,WAAW;0BACTL,eAAe,EAAE;wBADR;sBAlBT,CAHJ;sBAwBG,OAAO,EAAE,MAAM3B,qBAAqB,CAACC,QAAD,EAAWC,KAAX,CAxBvC;sBAAA,UAyBKsB,QAAQ,CAACE;oBAzBd,GACKF,QAAQ,CAACE,KADd;sBAAA;sBAAA;sBAAA;oBAAA,QAHH;kBADH,GAAqBzB,QAAQ,GAAG,UAAhC;oBAAA;oBAAA;oBAAA;kBAAA,QADK,CADD,eAiCE,QAAC,MAAD;oBACA,EAAE,EAAE;sBAACiB,SAAS,EAAE,KAAZ;sBAAmBJ,KAAK,EAAE,KAA1B;sBAAiCc,YAAY,EAAE,MAA/C;sBAAuDE,WAAW,EAAE,MAApE;sBACAI,UAAU,EAAE,MADZ;sBACoBP,eAAe,EAAE,SADrC;sBAEA,WAAW;wBACTA,eAAe,EAAE;sBADR;oBAFX,CADJ;oBAKA,EAAE,EAAE,SALJ;oBAKe,OAAO,EAAGQ,CAAD,IAAOvC,oBAAoB,CAACuC,CAAC,CAACC,MAAF,CAASvC,EAAV,CALnD;oBAAA,uBAMF,QAAC,OAAD;sBAAS,EAAE,EAAE;wBAAEsB,KAAK,EAAE;sBAAT;oBAAb;sBAAA;sBAAA;sBAAA;oBAAA;kBANE;oBAAA;oBAAA;oBAAA;kBAAA,QAjCF;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAHF;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAhDF,eA4FE;gBAAK,SAAS,EAAC,gBAAf;gBAAA,wBACA;kBAAK,SAAS,EAAC,aAAf;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QADA,eAGE;kBAAK,SAAS,EAAC,8BAAf;kBAAA,WACCE,MAAM,CAACC,IAAP,CAAYlC,IAAZ,EAAkBmC,GAAlB,CAAsBtB,QAAQ,iBACnC,QAAC,KAAD,CAAO,QAAP;oBAAA,UACGb,IAAI,CAACa,QAAD,CAAJ,CACIsB,GADJ,CACQ,CAACC,QAAD,EAAWtB,KAAX,KAAqBsB,QAAQ,CAACC,SAAT,IAC1BD,QAAQ,CAACtC,GAAT,KAAiB,WADS,iBAE1B,QAAC,MAAD;sBAAQ,SAAS,EAAC,0BAAlB;sBAEA,EAAE,EAAEsC,QAAQ,CAACE,KAFb;sBAGA,EAAE,EAAE;wBACFX,UAAU,EAAE,kBADV;wBAEFC,QAAQ,EAAE,OAFR;wBAGFW,eAAe,EAAEH,QAAQ,CAACC,SAAT,GACf,kBADe,GAEf,SALA;wBAMFN,KAAK,EAAEK,QAAQ,CAACC,SAAT,GACL,MADK,GAEL,MARA;wBASFG,YAAY,EAAE,MATZ;wBAUFhB,OAAO,EAAE,KAVP;wBAWFE,KAAK,EAAE,MAXL;wBAYFe,SAAS,EAAG,kCAZV;wBAaFX,SAAS,EAAE,KAbT;wBAcFY,WAAW,EAAE,MAdX;wBAeFI,UAAU,EAAE,MAfV;wBAgBFH,UAAU,EAAE,MAhBV;wBAiBFC,MAAM,EAAE,SAjBN;wBAkBF,WAAW;0BACTL,eAAe,EAAE;wBADR;sBAlBT,CAHJ;sBAwBG,OAAO,EAAE,MAAM3B,qBAAqB,CAACC,QAAD,EAAWC,KAAX,CAxBvC;sBAAA,UAyBKsB,QAAQ,CAACE;oBAzBd,GACKF,QAAQ,CAACE,KADd;sBAAA;sBAAA;sBAAA;oBAAA,QAHH;kBADH,GAAqBzB,QAAQ,GAAG,UAAhC;oBAAA;oBAAA;oBAAA;kBAAA,QADK,CADD,eAiCE,QAAC,MAAD;oBACA,EAAE,EAAE;sBAACiB,SAAS,EAAE,KAAZ;sBAAmBJ,KAAK,EAAE,KAA1B;sBAAiCc,YAAY,EAAE,MAA/C;sBAAuDE,WAAW,EAAE,MAApE;sBACAI,UAAU,EAAE,MADZ;sBACoBP,eAAe,EAAE,SADrC;sBAEA,WAAW;wBACTA,eAAe,EAAE;sBADR;oBAFX,CADJ;oBAKA,EAAE,EAAE,WALJ;oBAKiB,OAAO,EAAGQ,CAAD,IAAOvC,oBAAoB,CAACuC,CAAC,CAACC,MAAF,CAASvC,EAAV,CALrD;oBAAA,uBAMF,QAAC,OAAD;sBAAS,EAAE,EAAE;wBAAEsB,KAAK,EAAE;sBAAT;oBAAb;sBAAA;sBAAA;sBAAA;oBAAA;kBANE;oBAAA;oBAAA;oBAAA;kBAAA,QAjCF;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAHF;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QA5FF,eAwIE;gBAAK,SAAS,EAAC,gBAAf;gBAAA,wBACA;kBAAK,SAAS,EAAC,aAAf;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QADA,eAGE;kBAAK,SAAS,EAAC,8BAAf;kBAAA,WACCE,MAAM,CAACC,IAAP,CAAYlC,IAAZ,EAAkBmC,GAAlB,CAAsBtB,QAAQ,iBACnC,QAAC,KAAD,CAAO,QAAP;oBAAA,UACGb,IAAI,CAACa,QAAD,CAAJ,CACIsB,GADJ,CACQ,CAACC,QAAD,EAAWtB,KAAX,KAAqBsB,QAAQ,CAACC,SAAT,IAC1BD,QAAQ,CAACtC,GAAT,KAAiB,UADS,iBAE1B,QAAC,MAAD;sBAAQ,SAAS,EAAC,0BAAlB;sBAEA,EAAE,EAAEsC,QAAQ,CAACE,KAFb;sBAGA,EAAE,EAAE;wBACFX,UAAU,EAAE,kBADV;wBAEFC,QAAQ,EAAE,OAFR;wBAGFW,eAAe,EAAEH,QAAQ,CAACC,SAAT,GACf,kBADe,GAEf,SALA;wBAMFN,KAAK,EAAEK,QAAQ,CAACC,SAAT,GACL,MADK,GAEL,MARA;wBASFG,YAAY,EAAE,MATZ;wBAUFhB,OAAO,EAAE,KAVP;wBAWFE,KAAK,EAAE,MAXL;wBAYFe,SAAS,EAAG,kCAZV;wBAaFX,SAAS,EAAE,KAbT;wBAcFY,WAAW,EAAE,MAdX;wBAeFI,UAAU,EAAE,MAfV;wBAgBFH,UAAU,EAAE,MAhBV;wBAiBFC,MAAM,EAAE,SAjBN;wBAkBF,WAAW;0BACTL,eAAe,EAAE;wBADR;sBAlBT,CAHJ;sBAwBG,OAAO,EAAE,MAAM3B,qBAAqB,CAACC,QAAD,EAAWC,KAAX,CAxBvC;sBAAA,UAyBKsB,QAAQ,CAACE;oBAzBd,GACKF,QAAQ,CAACE,KADd;sBAAA;sBAAA;sBAAA;oBAAA,QAHH;kBADH,GAAqBzB,QAAQ,GAAG,UAAhC;oBAAA;oBAAA;oBAAA;kBAAA,QADK,CADD,eAiCE,QAAC,MAAD;oBACA,EAAE,EAAE;sBAACiB,SAAS,EAAE,KAAZ;sBAAmBJ,KAAK,EAAE,KAA1B;sBAAiCc,YAAY,EAAE,MAA/C;sBAAuDE,WAAW,EAAE,MAApE;sBACAI,UAAU,EAAE,MADZ;sBACoBP,eAAe,EAAE,SADrC;sBAEA,WAAW;wBACTA,eAAe,EAAE;sBADR;oBAFX,CADJ;oBAKA,EAAE,EAAE,UALJ;oBAKgB,OAAO,EAAGQ,CAAD,IAAOvC,oBAAoB,CAACuC,CAAC,CAACC,MAAF,CAASvC,EAAV,CALpD;oBAAA,uBAMF,QAAC,OAAD;sBAAS,EAAE,EAAE;wBAAEsB,KAAK,EAAE;sBAAT;oBAAb;sBAAA;sBAAA;sBAAA;oBAAA;kBANE;oBAAA;oBAAA;oBAAA;kBAAA,QAjCF;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAHF;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAxIF,eAoLE;gBAAK,SAAS,EAAC,gBAAf;gBAAA,wBACA;kBAAK,SAAS,EAAC,aAAf;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QADA,eAGE;kBAAK,SAAS,EAAC,8BAAf;kBAAA,WACCE,MAAM,CAACC,IAAP,CAAYlC,IAAZ,EAAkBmC,GAAlB,CAAsBtB,QAAQ,iBACnC,QAAC,KAAD,CAAO,QAAP;oBAAA,UACGb,IAAI,CAACa,QAAD,CAAJ,CACIsB,GADJ,CACQ,CAACC,QAAD,EAAWtB,KAAX,KAAqBsB,QAAQ,CAACC,SAAT,IAC1BD,QAAQ,CAACtC,GAAT,KAAiB,QADS,iBAE1B,QAAC,MAAD;sBAAQ,SAAS,EAAC,0BAAlB;sBAEA,EAAE,EAAEsC,QAAQ,CAACE,KAFb;sBAGA,EAAE,EAAE;wBACFX,UAAU,EAAE,kBADV;wBAEFC,QAAQ,EAAE,OAFR;wBAGFW,eAAe,EAAEH,QAAQ,CAACC,SAAT,GACf,kBADe,GAEf,SALA;wBAMFN,KAAK,EAAEK,QAAQ,CAACC,SAAT,GACL,MADK,GAEL,MARA;wBASFG,YAAY,EAAE,MATZ;wBAUFhB,OAAO,EAAE,KAVP;wBAWFE,KAAK,EAAE,MAXL;wBAYFe,SAAS,EAAG,kCAZV;wBAaFX,SAAS,EAAE,KAbT;wBAcFY,WAAW,EAAE,MAdX;wBAeFI,UAAU,EAAE,MAfV;wBAgBFH,UAAU,EAAE,MAhBV;wBAiBFC,MAAM,EAAE,SAjBN;wBAkBF,WAAW;0BACTL,eAAe,EAAE;wBADR;sBAlBT,CAHJ;sBAwBG,OAAO,EAAE,MAAM3B,qBAAqB,CAACC,QAAD,EAAWC,KAAX,CAxBvC;sBAAA,UAyBKsB,QAAQ,CAACE;oBAzBd,GACKF,QAAQ,CAACE,KADd;sBAAA;sBAAA;sBAAA;oBAAA,QAHH;kBADH,GAAqBzB,QAAQ,GAAG,UAAhC;oBAAA;oBAAA;oBAAA;kBAAA,QADK,CADD,eAiCE,QAAC,MAAD;oBACA,EAAE,EAAE;sBAACiB,SAAS,EAAE,KAAZ;sBAAmBJ,KAAK,EAAE,KAA1B;sBAAiCc,YAAY,EAAE,MAA/C;sBAAuDE,WAAW,EAAE,MAApE;sBACAI,UAAU,EAAE,MADZ;sBACoBP,eAAe,EAAE,SADrC;sBAEA,WAAW;wBACTA,eAAe,EAAE;sBADR;oBAFX,CADJ;oBAKA,EAAE,EAAE,QALJ;oBAKc,OAAO,EAAGQ,CAAD,IAAOvC,oBAAoB,CAACuC,CAAC,CAACC,MAAF,CAASvC,EAAV,CALlD;oBAAA,uBAMF,QAAC,OAAD;sBAAS,EAAE,EAAE;wBAAEsB,KAAK,EAAE;sBAAT;oBAAb;sBAAA;sBAAA;sBAAA;oBAAA;kBANE;oBAAA;oBAAA;oBAAA;kBAAA,QAjCF;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAHF;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QApLF,eAgOE;gBAAK,SAAS,EAAC,gBAAf;gBAAA,wBACA;kBAAK,SAAS,EAAC,aAAf;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QADA,eAGE;kBAAK,SAAS,EAAC,8BAAf;kBAAA,WACCE,MAAM,CAACC,IAAP,CAAYlC,IAAZ,EAAkBmC,GAAlB,CAAsBtB,QAAQ,iBACnC,QAAC,KAAD,CAAO,QAAP;oBAAA,UACGb,IAAI,CAACa,QAAD,CAAJ,CACIsB,GADJ,CACQ,CAACC,QAAD,EAAWtB,KAAX,KAAqBsB,QAAQ,CAACC,SAAT,IAC1BD,QAAQ,CAACtC,GAAT,KAAiB,UADS,iBAE1B,QAAC,MAAD;sBAAQ,SAAS,EAAC,0BAAlB;sBAEA,EAAE,EAAEsC,QAAQ,CAACE,KAFb;sBAGA,EAAE,EAAE;wBACFX,UAAU,EAAE,kBADV;wBAEFC,QAAQ,EAAE,OAFR;wBAGFW,eAAe,EAAEH,QAAQ,CAACC,SAAT,GACf,kBADe,GAEf,SALA;wBAMFN,KAAK,EAAEK,QAAQ,CAACC,SAAT,GACL,MADK,GAEL,MARA;wBASFG,YAAY,EAAE,MATZ;wBAUFhB,OAAO,EAAE,KAVP;wBAWFE,KAAK,EAAE,MAXL;wBAYFe,SAAS,EAAG,kCAZV;wBAaFX,SAAS,EAAE,KAbT;wBAcFY,WAAW,EAAE,MAdX;wBAeFI,UAAU,EAAE,MAfV;wBAgBFH,UAAU,EAAE,MAhBV;wBAiBFC,MAAM,EAAE,SAjBN;wBAkBF,WAAW;0BACTL,eAAe,EAAE;wBADR;sBAlBT,CAHJ;sBAwBG,OAAO,EAAE,MAAM3B,qBAAqB,CAACC,QAAD,EAAWC,KAAX,CAxBvC;sBAAA,UAyBKsB,QAAQ,CAACE;oBAzBd,GACKF,QAAQ,CAACE,KADd;sBAAA;sBAAA;sBAAA;oBAAA,QAHH;kBADH,GAAqBzB,QAAQ,GAAG,UAAhC;oBAAA;oBAAA;oBAAA;kBAAA,QADK,CADD,eAiCE,QAAC,MAAD;oBACA,EAAE,EAAE;sBAACiB,SAAS,EAAE,KAAZ;sBAAmBJ,KAAK,EAAE,KAA1B;sBAAiCc,YAAY,EAAE,MAA/C;sBAAuDE,WAAW,EAAE,MAApE;sBACAI,UAAU,EAAE,MADZ;sBACoBP,eAAe,EAAE,SADrC;sBAEA,WAAW;wBACTA,eAAe,EAAE;sBADR;oBAFX,CADJ;oBAKA,EAAE,EAAE,UALJ;oBAKgB,OAAO,EAAGQ,CAAD,IAAOvC,oBAAoB,CAACuC,CAAC,CAACC,MAAF,CAASvC,EAAV,CALpD;oBAAA,uBAMF,QAAC,OAAD;sBAAS,EAAE,EAAE;wBAAEsB,KAAK,EAAE;sBAAT;oBAAb;sBAAA;sBAAA;sBAAA;oBAAA;kBANE;oBAAA;oBAAA;oBAAA;kBAAA,QAjCF;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAHF;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAhOF,eA4QE;gBAAK,SAAS,EAAC,gBAAf;gBAAA,wBACA;kBAAK,SAAS,EAAC,aAAf;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QADA,eAGE;kBAAK,SAAS,EAAC,8BAAf;kBAA8C,KAAK,EAAE;oBAACkB,WAAW,EAAE;kBAAd,CAArD;kBAAA,WACChB,MAAM,CAACC,IAAP,CAAYlC,IAAZ,EAAkBmC,GAAlB,CAAsBtB,QAAQ,iBACnC,QAAC,KAAD,CAAO,QAAP;oBAAA,UACGb,IAAI,CAACa,QAAD,CAAJ,CACIsB,GADJ,CACQ,CAACC,QAAD,EAAWtB,KAAX,KAAqBsB,QAAQ,CAACC,SAAT,IAC1BD,QAAQ,CAACtC,GAAT,KAAiB,QADS,iBAE1B,QAAC,MAAD;sBAAQ,SAAS,EAAC,0BAAlB;sBAEA,EAAE,EAAEsC,QAAQ,CAACE,KAFb;sBAGA,EAAE,EAAE;wBACFX,UAAU,EAAE,kBADV;wBAEFC,QAAQ,EAAE,OAFR;wBAGFW,eAAe,EAAEH,QAAQ,CAACC,SAAT,GACf,kBADe,GAEf,SALA;wBAMFN,KAAK,EAAEK,QAAQ,CAACC,SAAT,GACL,MADK,GAEL,MARA;wBASFG,YAAY,EAAE,MATZ;wBAUFhB,OAAO,EAAE,KAVP;wBAWFE,KAAK,EAAE,MAXL;wBAYFe,SAAS,EAAG,kCAZV;wBAaFX,SAAS,EAAE,KAbT;wBAcFY,WAAW,EAAE,MAdX;wBAeFI,UAAU,EAAE,MAfV;wBAgBFH,UAAU,EAAE,MAhBV;wBAiBFC,MAAM,EAAE,SAjBN;wBAkBF,WAAW;0BACTL,eAAe,EAAE;wBADR;sBAlBT,CAHJ;sBAwBG,OAAO,EAAE,MAAM3B,qBAAqB,CAACC,QAAD,EAAWC,KAAX,CAxBvC;sBAAA,UAyBKsB,QAAQ,CAACE;oBAzBd,GACKF,QAAQ,CAACE,KADd;sBAAA;sBAAA;sBAAA;oBAAA,QAHH;kBADH,GAAqBzB,QAAQ,GAAG,UAAhC;oBAAA;oBAAA;oBAAA;kBAAA,QADK,CADD,eAiCE,QAAC,MAAD;oBACA,EAAE,EAAE;sBAACiB,SAAS,EAAE,KAAZ;sBAAmBJ,KAAK,EAAE,KAA1B;sBAAiCc,YAAY,EAAE,MAA/C;sBAAuDE,WAAW,EAAE,MAApE;sBACAI,UAAU,EAAE,MADZ;sBACoBP,eAAe,EAAE,SADrC;sBAEA,WAAW;wBACTA,eAAe,EAAE;sBADR;oBAFX,CADJ;oBAKA,EAAE,EAAE,QALJ;oBAKc,OAAO,EAAGQ,CAAD,IAAOvC,oBAAoB,CAACuC,CAAC,CAACC,MAAF,CAASvC,EAAV,CALlD;oBAAA,uBAMF,QAAC,OAAD;sBAAS,EAAE,EAAE;wBAAEsB,KAAK,EAAE;sBAAT;oBAAb;sBAAA;sBAAA;sBAAA;oBAAA;kBANE;oBAAA;oBAAA;oBAAA;kBAAA,QAjCF;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAHF;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QA5QF;YAAA;cAAA;cAAA;cAAA;YAAA,QAlDd,EA4WSjC,GAAG,iBACJ,QAAC,GAAD;cACA,EAAE,EAAE;gBAAC4B,KAAK,EAAE,KAAR;gBAAea,eAAe,EAAE,SAAhC;gBAA2CW,QAAQ,EAAE,OAArD;gBACJC,GAAG,EAAE,MADD;gBACS3B,OAAO,EAAE,iBADlB;gBAEJ4B,KAAK,EAAE,MAFH;gBAGJN,UAAU,EAAE,MAHR;gBAIJJ,WAAW,EAAE,MAJT;gBAKJV,YAAY,EAAE,OALV;gBAKmBQ,YAAY,EAAE,MALjC;gBAMJb,UAAU,EAAE,kBANR;gBAOJC,QAAQ,EAAE;cAPN,CADJ;cAAA,uBASA;gBAAG,KAAK,EAAE;kBAAEP,OAAO,EAAE;gBAAX,CAAV;gBAAA,oEAC0C;kBAAA,UAASvB;gBAAT;kBAAA;kBAAA;kBAAA;gBAAA,QAD1C;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YATA;cAAA;cAAA;cAAA;YAAA,QA7WR,eA2XQ,QAAC,GAAD;cAAK,EAAE,EAAE;gBAAE0B,OAAO,EAAE,KAAX;gBAAiBH,OAAO,EAAE,MAA1B;gBAAkCC,aAAa,EAAE,KAAjD;gBACTuB,cAAc,EAAE,QADP;gBACiBpB,UAAU,EAAE,QAD7B;gBACuCC,KAAK,EAAE;cAD9C,CAAT;cAAA,wBAGF,QAAC,MAAD;gBAAQ,OAAO,EAAC,WAAhB;gBAA4B,SAAS,EAAC,WAAtC;gBACA,EAAE,EAAE;kBAACa,eAAe,EAAE,cAAlB;kBACJZ,UAAU,EAAE,6BADR;kBAEJC,QAAQ,EAAE,KAFN;kBAGJC,UAAU,EAAE,KAHR;kBAIJH,KAAK,EAAE,KAJH;kBAKJc,YAAY,EAAE,MALV;kBAMJE,WAAW,EAAE;gBANT,CADJ;gBAQG,OAAO,EAAG,MAAM7C,QAAQ,CAAC,CAAC,CAAF,CAR3B;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAHE,eAYF,QAAC,MAAD;gBAAQ,OAAO,EAAC,WAAhB;gBAA4B,SAAS,EAAC,WAAtC;gBACA,EAAE,EAAE;kBAAC0C,eAAe,EAAE,cAAlB;kBACJZ,UAAU,EAAE,6BADR;kBAEJC,QAAQ,EAAE,KAFN;kBAGJC,UAAU,EAAE,KAHR;kBAIJH,KAAK,EAAE,KAJH;kBAKJc,YAAY,EAAE,MALV;kBAMJE,WAAW,EAAE;gBANT,CADJ;gBAQG,OAAO,EAAE,MAAMtB,eAAe,EARjC;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAZE;YAAA;cAAA;cAAA;cAAA;YAAA,QA3XR,EAoZOiC,iBAAiB,GAAG,CAApB,IAA0BnD,SAA1B,iBACD,QAAC,GAAD;cAAK,EAAE,EAAE;gBAAEwB,KAAK,EAAE,KAAT;gBACGwB,QAAQ,EAAE,OADb;gBAEGC,GAAG,EAAE;cAFR,CAAT;cAAA,uBAGE,QAAC,QAAD;gBAAU,EAAE,EAAE/C,IAAd;gBAAA,uBACE,QAAC,KAAD;kBAAO,OAAO,EAAC,QAAf;kBAAwB,QAAQ,EAAC,OAAjC;kBACE,MAAM,eACJ,QAAC,UAAD;oBACE,cAAW,OADb;oBAEE,KAAK,EAAC,SAFR;oBAGE,IAAI,EAAC,OAHP;oBAIE,OAAO,EAAE,MAAM;sBACbC,OAAO,CAAC,KAAD,CAAP;oBAAe,CALnB;oBAAA,uBAOE,QAAC,SAAD;sBAAW,QAAQ,EAAC;oBAApB;sBAAA;sBAAA;sBAAA;oBAAA;kBAPF;oBAAA;oBAAA;oBAAA;kBAAA,QAFJ;kBAWE,EAAE,EAAE;oBAAE2B,YAAY,EAAE;kBAAhB,CAXN;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA;cADF;gBAAA;gBAAA;gBAAA;cAAA;YAHF;cAAA;cAAA;cAAA;YAAA,QArZN;UAAA;YAAA;YAAA;YAAA;UAAA;QANF;UAAA;UAAA;UAAA;QAAA,QAFA,eAqbA,QAAC,MAAD;UAAA;UAAA;UAAA;QAAA,QArbA;MAAA,gBADF;IAwbE,CApcF;EAocG,CA/cJ;AA+cK;;GA5ekBpC,a;UAELL,W;;;KAFKK,a"},"metadata":{},"sourceType":"module"}